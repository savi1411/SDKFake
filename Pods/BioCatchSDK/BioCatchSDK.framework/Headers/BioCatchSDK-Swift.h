// Generated by Apple Swift version 4.1 (swiftlang-902.0.48 clang-902.0.37.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BioCatchSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum BioCatchState : NSInteger;
enum ContextType : NSInteger;
enum BioCatchKeyFormat : NSInteger;
@class NSURLAuthenticationChallenge;

/// :
/// Entry point for the BioCatch iOS SDK. Use this class to start,
/// stop, pause, and resume BioCatch data collection.
/// The single instance of this class can be accessed through the
/// sharedInstance property.
/// \code
/// Example:
///
/// BioCatch.sharedInstance.start(customerSessionID: "", bcServerUrl: url)
///
/// \endcode
SWIFT_CLASS("_TtC11BioCatchSDK8BioCatch")
@interface BioCatch : NSObject
/// :
/// This notification is sent when the BioCatch SDK changes its state.
/// To register for this notification, use NSNotificationCenter. The current
/// state of the SDK is provided in the BioCatchStateChangeNotificationStateKey
/// key of the NSNotification’s userInfo dictionary; the value is the integer
/// value of BioCatchState. You can also use the BioCatch.state property to
/// determine the current state of the SDK.
/// \code
///      This notification is not necessarily delivered on the main thread.
///  
///      Example:
///  
///      Swift 3:
///  
///          NotificationCenter.default.addObserver(
///              self,
///              selector: #selector(sdkStateChanged(_:)),
///              name: NSNotification.Name(rawValue: BioCatch.StateChangeNotification),
///              object: nil
///          )
///
///          @objc fileprivate func sdkStateChanged(_ notification: Notification) {
///             let newState = notification.userInfo?[BioCatchStateChangeNotificationStateKey] as? Int
///          
///             // Alternative:
///             let currentState = BioCatch.sharedInstance.state
///          }
///
///      Objective c:
///
///          [[NSNotificationCenter defaultCenter] addObserver:self
///                                                   selector:@selector(sdkStateChanged:)
///                                                       name:BioCatch.StateChangeNotification
///                                                     object:nil];
///
///          - (void)sdkStateChanged:(NSNotification *)notification {
///              BioCatchState state = [[BioCatch sharedInstance] state];
///          }
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull StateChangeNotification;)
+ (NSString * _Nonnull)StateChangeNotification SWIFT_WARN_UNUSED_RESULT;
/// The key that contains the new state of the BioCatch SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull StateChangeNotificationStateKey;)
+ (NSString * _Nonnull)StateChangeNotificationStateKey SWIFT_WARN_UNUSED_RESULT;
/// :
/// This notification is sent when a new session is started in the BioCatch SDK.
/// To register for this notification, use NSNotificationCenter. The number of
/// the new session is provided in the BioCatchSessionStartNotificationSessionNumberKey
/// key of the NSNotification’s userInfo dictionary; the value is a string.
/// \code
///      This notification is not necessarily delivered on the main thread.
///      
///      Example:
///  
///      Swift 3:
///  
///          NotificationCenter.default.addObserver(
///              self,
///              selector: #selector(sessionStarted(_:)),
///              name: NSNotification.Name(rawValue: BioCatch.SessionStartNotification),
///              object: nil
///          )
///      
///          @objc fileprivate func sessionStarted(_ notification: Notification) {
///              let sessionNumber = notification.userInfo?[BioCatch.SessionStartNotificationSessionNumberKey] as? String
///          }
///      
///      Objective c:
///      
///          [[NSNotificationCenter defaultCenter] addObserver:self
///                                                   selector:@selector(sessionStarted:)
///                                                       name:BioCatch.SessionStartNotification
///                                                     object:nil];
///
///          - (void)sessionStarted:(NSNotification *)notification {
///              NSString text = notification.userInfo[BioCatch.SessionStartNotificationSessionNumberKey];
///          }
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SessionStartNotification;)
+ (NSString * _Nonnull)SessionStartNotification SWIFT_WARN_UNUSED_RESULT;
/// The key that contains the session number of the new session.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SessionStartNotificationSessionNumberKey;)
+ (NSString * _Nonnull)SessionStartNotificationSessionNumberKey SWIFT_WARN_UNUSED_RESULT;
/// Returns the single shared instance of this class. The first time called must be on the main queue.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BioCatch * _Nonnull sharedInstance;)
+ (BioCatch * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// Returns the current state of the BioCatch SDK.
@property (nonatomic, readonly) enum BioCatchState state;
/// Get the BioCatch-generated session number. The session number is nil if BioCatch
/// services have not been initialized with a call to start, or after a call
/// to stop.
@property (nonatomic, readonly, copy) NSString * _Nullable sessionNumber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Start BioCatch services data collection using the specified session
/// and customer identifiers.
/// \param customerSessionID The customer session identifier
///
/// \param bcServerUrl The URL from which to initialize the Biocatch SDK
///
/// \param publicKey The public key provided by Biocatch
///
- (void)startWithCustomerSessionID:(NSString * _Nullable)customerSessionID bcServerUrl:(NSURL * _Nonnull)bcServerUrl publicKey:(NSString * _Nullable)publicKey;
/// Stop BioCatch services data collection and shut down any background
/// components performing data collection and delivery.
- (void)stop;
/// Suspend BioCatch services data collection and delivery. Resume data
/// collection by calling resume.
- (void)pause;
/// Resume BioCatch services data collection and delivery. Call this method
/// after you suspended services by calling pause.
- (void)resume;
/// Reset the SDK’s internal session number. This method can be called
/// only while BioCatch services are active (after a call to start and
/// before a call to stop).
/// To monitor for session changes, use the BioCatchSessionStartNotification
/// notification.
- (void)resetSession;
/// Update the customer session identifier. This method can be called
/// only while BioCatch services are active (after a call to start and
/// before a call to stop). The internal session number is also reset
/// as a result of this call.
/// To monitor for session changes, use the BioCatchSessionStartNotification
/// notification.
- (void)updateCustomerSessionID:(NSString * _Nullable)customerSessionID;
/// Call this function to change the current context value. This value is saved with the rest of the user data.
/// The possible values for contextType are determined in a closed list
/// \param contextType a String value determined in the ContextType class, indicating the current context type. Example: BioCatch.contextType.loginOne
///
/// \param otherDescription additional description for the context
///
- (void)changeContext:(enum ContextType)contextType otherDescription:(NSString * _Nullable)otherDescription SWIFT_DEPRECATED_MSG("Use changeContextWith(_ contextName: String, otherDescription: String?) instead");
/// Call this function to change the current context value. This value is saved with the rest of the user data.
/// \code
/// - Parameters:
///     - contextName: a String value indicating the current context type. Example: Login screen
///     - otherDescription: additional description for the context
///
/// \endcode
- (void)changeContextWith:(NSString * _Nonnull)contextName;
/// Call this function to overide the current pinning method for secure networking. If true is returned the connection is secure.
/// - Parameters:
/// - formatReturned: The format the public key is returned.
/// - method: an optional function that does custom key pinning. The publicKey is the leaf certificates public key. The expectedKey is the key that was entered when calling the SDK’s start method.
- (void)overidePublicKeyPinningWithFormatReturned:(enum BioCatchKeyFormat)formatReturned method:(BOOL (^ _Nullable)(NSString * _Nonnull, NSString * _Nullable))method;
/// Call this function to overide the current pinning method for secure networking, this method has highest priority. If true is returned the connection is secure.
/// \param method an optional function that does custom key pinning. The challenge is received through the
/// urlSession(_ session: URLSession, didReceive challenge: URLAuthenticationChallenge, completionHandler: @escaping (URLSession.AuthChallengeDisposition, URLCredential?) -> Swift.Void)
/// delegate method. The expectedKey is the key that was entered when calling the SDK’s start method.
///
- (void)overideCertificatePinningWithMethod:(BOOL (^ _Nullable)(NSURLAuthenticationChallenge * _Nonnull, NSString * _Nullable))method;
/// Get the BioCatchch version.
- (NSString * _Nonnull)getVersion SWIFT_WARN_UNUSED_RESULT;
@end

/// Represents the Public key format returned in the overidePublicKeyPinningWith(options: BioCatchKeyFormat, method: ((_ publicKey: String, _ expectedKey: String?) -> Bool)?) method.
typedef SWIFT_ENUM(NSInteger, BioCatchKeyFormat) {
  BioCatchKeyFormatSha256 = 0,
  BioCatchKeyFormatBase64 = 1,
};

/// Represents the current state of the BioCatch SDK.
typedef SWIFT_ENUM(NSInteger, BioCatchState) {
/// BioCatch services are not enabled.
  BioCatchStateOff = 0,
/// BioCatch services are enabled.
  BioCatchStateRunning = 1,
/// BioCatch services are paused; data collection does not occur.
  BioCatchStatePaused = 2,
};

typedef SWIFT_ENUM(NSInteger, ContextType) {
  ContextTypeNone = 0,
  ContextTypeLoginOne = 1,
  ContextTypeLoginTwo = 2,
  ContextTypeLoginThree = 3,
  ContextTypePassword = 4,
  ContextTypeSecondLogin = 5,
  ContextTypeHomePage = 6,
  ContextTypeViewStatements = 7,
  ContextTypeViewPayments = 8,
  ContextTypeMakePayments = 9,
  ContextTypePaymentConfirm = 10,
  ContextTypeBillPayment = 11,
  ContextTypePersonPayment = 12,
  ContextTypeDomesticPayment = 13,
  ContextTypeInternationalPayment = 14,
  ContextTypeMakeTransfer = 15,
  ContextTypeTransferConfirm = 16,
  ContextTypeViewPaymentDetails = 17,
  ContextTypeAuthorizePayment = 18,
  ContextTypeStandingOrder = 19,
  ContextTypeStandingOrderConfirm = 20,
  ContextTypeMakeLoan = 21,
  ContextTypeLoanConfirm = 22,
  ContextTypeAddPayee = 23,
  ContextTypeChangeDetails = 24,
  ContextTypeChangePhone = 25,
  ContextTypeChangePhoneConfirm = 26,
  ContextTypeChangeEmail = 27,
  ContextTypeChangeEmailConfirm = 28,
  ContextTypeChangeAddress = 29,
  ContextTypeChangeAddressConfirm = 30,
  ContextTypeChangePassword = 31,
  ContextTypeChangePasswordConfirm = 32,
  ContextTypeChangeMemorableWord = 33,
  ContextTypeChangeMemorableWordConfirm = 34,
  ContextTypeAccountSettings = 35,
  ContextTypeDigitalServicing = 36,
  ContextTypeContactUs = 37,
  ContextTypeEndOfSession = 38,
  ContextTypeNewOrder = 39,
  ContextTypeNewOrderConfirm = 40,
  ContextTypeOther = 41,
  ContextTypeOtherTwo = 42,
};





















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
